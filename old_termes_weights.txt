    for(const auto &goal_field: goal_fields){
        int goal_field_id = get<1>(goal_field);
        int goal_field_height = get<2>(goal_field);


        // as long as the tower has not yet reached its goal --> build staircase:
        if(goal_field_height != goal_heights[goal_field_id]){

            for(const auto &field : fields){

                int field_id = get<1>(field);
                int field_height = get<2>(field);

                // when building a staircase, place a block is good:
                feature_potentials[{get<0>(goal_field),get<0>(field)}] = (field_count-field_height)*(field_count*5);

                // each field has its personal maximum height:
                if (field_height >= field_id){
                    feature_potentials[{get<0>(goal_field),get<0>(field)}] = numeric_limits<int>::max();
                }

                for(const auto &other_field : fields){
                    int other_field_id = get<1>(other_field);
                    int other_field_height = get<2>(other_field);

                    // fields that are further away cannot be lower than nearby fields:
                    if(field_id < other_field_id && other_field_height < field_height ){
                        feature_potentials[{get<0>(goal_field),get<0>(field), get<0>(other_field)}] = numeric_limits<int>::max();
                    }

                    // a neighbor can only be one block higher:
                    if(other_field_height > field_height + 1 && field_id + 1 == other_field_id){
                        feature_potentials[{get<0>(goal_field),get<0>(field), get<0>(other_field)}] = numeric_limits<int>::max();
                    }


                    // as long as one floor is not finished yet, another floor cannot be started:
                    if(field_id < other_field_id && field_height < field_id -1 && other_field_height > field_height + 1){
                        feature_potentials[{get<0>(goal_field),get<0>(field), get<0>(other_field)}] = numeric_limits<int>::max();
                    }
                    

                    for(const auto &at : robot){
                        int robot_field_id = get<1>(at);

                        // as long as one floor is not finished yet, the robot cannot walk on that floor:
                        if(field_height < field_id -1 && robot_field_id == other_field_id && field_height < other_field_height){
                            feature_potentials[{get<0>(goal_field),get<0>(field), get<0>(other_field),get<0>(at)}] = numeric_limits<int>::max();
                        }

                        // identifies field_id where we have place next block (cannot handle case where we have to place a block in the last space)
                        if(other_field_height < other_field_id -1 && field_height < other_field_height && field_id == other_field_id -1){
                            feature_potentials[{get<0>(goal_field),get<0>(field), get<0>(other_field),get<0>(at)}] = 2*abs((other_field_id-2)-robot_field_id);
                        }

                        // when the last two fields have the same height, then walking forward can be good
                        if(other_field_id == field_count && field_height == other_field_height && field_id == other_field_id -1){
                            feature_potentials[{get<0>(goal_field),get<0>(field), get<0>(other_field),get<0>(at)}] = -robot_field_id;
                        }


                        /* for(const auto &in : hand){
                            bool block = get<1>(in);

                            // When the robot is carrying a block, it cannot stand right in front of a step belonging to an unfinished floor:
                            // we want to get rid of this (currently deciding if dimension 4 or not)
                            if(block && robot_field_id == field_id && other_field_height > field_height && field_id + 1 == other_field_id && field_height < field_id -1 ){
                                feature_potentials[{get<0>(field), get<0>(other_field),get<0>(at), get<0>(in)}] = numeric_limits<int>::max();
                            }

                        } */
            
                    }

                }

            }

            for(const auto &at : robot){
                int robot_field_id = get<1>(at);

                // the robot never has to walk on the last field:
                if(robot_field_id == field_count){
                    feature_potentials[{get<0>(goal_field),get<0>(at)}] = numeric_limits<int>::max();
                }

                for(const auto &in : hand){
                    bool block = get<1>(in);

                    if(!block){
                        // when not carrying a block, walking towards the depot is good:
                        feature_potentials[{get<0>(goal_field),get<0>(at), get<0>(in)}] = 4*robot_field_id ;
                    }
                    else{
                        // when carrying a block, walking towards the tower is good:
                        // not needed (we identify the best field to walk on and set weight according to this)
                        //feature_potentials[{get<0>(at),get<0>(in)}] = -robot_field_id;
                    }      
                }
            }
        }

        if(goal_field_height == goal_heights[goal_field_id]){

            // TODO: destruct stairs:

        }
    }


                            // as long as one floor is not finished yet, the robot cannot walk on that floor:
                            //if(field_height < field_id -1 && robot_field_id == other_field_id && field_height < other_field_height){
                            //    feature_potentials[{get<0>(goal_field),get<0>(field), get<0>(other_field),get<0>(at)}] = numeric_limits<int>::max();
                            //}

                            /*

                            // identifies field_id where we have place next block (cannot handle case where we have to place a block in the last space)
                            if(other_field_height < other_field_id -1 && field_height < other_field_height && field_id == other_field_id -1){
                                feature_potentials[{get<0>(goal_field),get<0>(field), get<0>(other_field),get<0>(at)}] = 2*abs((other_field_id-2)-robot_field_id);
                            }

                            // when the last two fields have the same height, then walking forward can be good
                            if(other_field_id == field_count && field_height == other_field_height && field_id == other_field_id -1){
                                feature_potentials[{get<0>(goal_field),get<0>(field), get<0>(other_field),get<0>(at)}] = -robot_field_id;
                            }

                            */